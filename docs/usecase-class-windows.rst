USECASE: CS Course with individual Windows instances for students
=================================================================

Last changed: 2024-09-24

.. contents::

.. _Terraform: https://www.terraform.io/
.. _Ansible: https://www.ansible.com/
.. _Terraform and NREC\: Part I - Basics: terraform-part1.html
.. _Terraform and NREC\: Part II - Additional resources: terraform-part2.html
.. _Terraform and NREC\: Part III - Dynamics: terraform-part3.html
.. _Terraform and NREC\: Part IV - Pairing with Ansible: terraform-part4.html
.. _OpenStack CLI tools: api.html

This document describes and tries to offer a solution on how to spin
up an arbitrary number of Windows Server instances. The idea is that
each student is given their own pre-configured instance with a set of
credentials.


Overview
--------

In this usecase study, we will demonstrate with examples and code the
entire process:

#. Install a master Windows instance, which we will later use as a
   template for new instances

#. Do whatever configuration changes, install software etc. that is
   required. All changes that should be identical on the students'
   instances should be done in this step

#. Make a snapshot of the master instance. This is the template
   template that will be used in the next step

#. Use Terraform_ to spin up a number of instances for students based
   on the template created in the previous step

#. Use Ansible_ to make individual configuration on each of the
   student instances. I our case we add an individual user with an
   autogenerated password for each instance


Prerequisites
-------------

This guide assumes that you have installed and know how to use
Terraform_ and Ansible_. For more information, see

* `Terraform and NREC\: Part I - Basics`_
* `Terraform and NREC\: Part II - Additional resources`_
* `Terraform and NREC\: Part III - Dynamics`_
* `Terraform and NREC\: Part IV - Pairing with Ansible`_

You also need to have the `OpenStack CLI tools`_ installed.


Preparing the master Windows instance
-------------------------------------

.. _Create a Windows virtual machine: create-windows-machine.html

For this step, consult the documentation available here:

* `Create a Windows virtual machine`_

Step by step example
~~~~~~~~~~~~~~~~~~~~

#. If you haven't already, create an SSH key of type RSA in PEM
   format:

   .. code-block:: console

     $ ssh-keygen -t rsa -b 4096 -m PEM -a 100 -f ~/.ssh/winkey

   In order to utilize the key to retrieve the admin password, the key
   must be RSA and in PEM format. Also, if you would like to retrieve
   the password in the GUI, the key cannot have a passphrase.

#. Import the public key ``~/.ssh/winkey.pub`` into openstack

#. Create a Windows instance. In this demo, we have chosen:

   - Name: ``in9999-master``
   - Image: ``GOLD Windows Server 2022 Standard``
   - Flavor: ``d1.medium``
   - Network: ``IPv6``
   - Security Groups: ``default`` and others
   - Key Pair: ``winkey`` (created above)

   You should add security groups that allow SSH and RDP from your
   current IP address.

#. Wait for the instance to be ready. With Windows it takes a long
   time, at least 10 minutes

   .. image:: images/usecase01-master.png
     :align: center
     :alt: Master instance

   When the instance responds to SSH logins, you can proceed:

   .. code-block:: console

     $ ssh 2001:700:2:8201::13a7 -l Admin -i ~/.ssh/winkey
     
   .. code-block:: doscon

     Microsoft Windows [Version 10.0.20348.2655]
     (c) Microsoft Corporation. All rights reserved.
     
     admin@IN9999-MASTER C:\Users\Admin>

#. Retrieve the Admin password. This can be done with GUI by selecting
   the **Retrieve Password** action, or by using the **nova** CLI
   tool:

   .. code-block:: console

     $ openstack server show in9999-master -c id -f value
     c318ce46-845f-4254-8955-3ae910de8835

     $ nova get-password c318ce46-845f-4254-8955-3ae910de8835 ~/.ssh/winkey
     nova CLI is deprecated and will be a removed in a future release
     0T9uzBckWHloDVLL8QqX

#. Log into the master Windows instance using RDP. There are a number
   of ways to do this, depending on your OS and preference. In our
   case, we connect using xfreerdp:

   .. code-block:: console

     $ xfreerdp /cert:ignore /d:workgroup /u:Admin /p:0T9uzBckWHloDVLL8QqX /v:[2001:700:2:8201::13a7] /h:1050 /w:1400

   .. image:: images/usecase01-master-rdp.png
     :align: center
     :alt: RDP to master instance

#. Install software and make any changes as required. For the purposes
   of this demonstration, we install Visual Studio Code

   .. image:: images/usecase01-master-install-vscode.png
     :align: center
     :alt: Master instance VSCode installation

#. Reboot the instance. This is required before running sysprep and
   proceeding with creating a snapshot.


Take a snapshot
---------------

.. _Creating a snapshot image: create-windows-machine.html#creating-a-snapshot-image

The procedure for creating a snapshot is described here:

* `Creating a snapshot image`_

Step by step example
~~~~~~~~~~~~~~~~~~~~

#. Log into the master instance again via RDP:

#. Run Powershell as administrator:

   .. image:: images/usecase01-master-powershell.png
     :align: center
     :alt: Run powershell as administrator

#. In the elevated Powershell, run Sysprep with the proper arguments:

   .. code-block:: pwsh-session

     PS C:\Users\Admin> $unattendedXmlPath = "c:\Program Files\Cloudbase Solutions\Cloudbase-Init\conf\Unattend.xml" ; ipconfig /release6 ; c:\windows\system32\sysprep\Sysprep /generalize /oobe /shutdown /unattend:"$unattendedXmlPath"

   This will take a few minutes, ending with the instance being shut
   off. If you connected via IPv6, the connection will be broken
   immediately, but Sysprep should do its job regardless. Proceed when
   the instance is properly shut down:

   .. code-block:: console

     $ openstack server show in9999-master -c status -f value
     SHUTOFF

#. Make a snapshot of the instance while it is shut off

   .. image:: images/usecase01-master-snapshot1.png
     :align: center
     :alt: Master instance snapshot (1)

   We name the snapshot «master-snap-01»:

   .. image:: images/usecase01-master-snapshot2.png
     :align: center
     :alt: Master instance snapshot (2)

We are now ready to proceed with creating student instances.


Create student instances
------------------------

This next step uses Terraform_ to create a number of instances for
students. First, create an empty directory and cd into it, e.g.:

.. code-block:: console

  $ mkdir ~/in9999-h2024
  $ cd ~/in9999-h2024

Copy the following files info this directory:

* :download:`main.tf <downloads/usecase01/main.tf>`
* :download:`secgroup.tf <downloads/usecase01/secgroup.tf>`
* :download:`variables.tf <downloads/usecase01/variables.tf>`
* :download:`terraform.tfvars <downloads/usecase01/terraform.tfvars>`

These files are from `Terraform and NREC\: Part IV - Pairing with
Ansible`_, but with adjustments for this usecase. Edit these files to
suit your needs. You should most likely want a lot of changes in
``variables.tf`` and ``terraform.tfvars``.

Run **terraform init**:

.. code-block:: console

  $ terraform init
  (...output omitted...)
  Terraform has been successfully initialized!

Run **terraform plan**:

.. code-block:: console

  $ terraform plan
  (...output omitted...)
  Plan: 29 to add, 0 to change, 0 to destroy.

Fix any errors from the plan command, then run **terraform apply**:

.. code-block:: console

  $ terraform apply
  (...output omitted...)
  Apply complete! Resources: 29 added, 0 changed, 0 destroyed.

The instances are now created, we are ready to make the final
configuration with Ansible_. The end result is:

.. code-block:: console

  $ openstack server list --name in9999 --sort-column Name -c Name -c Status -c Image
  +--------------------+---------+-----------------------------------+
  | Name               | Status  | Image                             |
  +--------------------+---------+-----------------------------------+
  | in9999-h2024-lab-0 | ACTIVE  | master-snap-01                    |
  | in9999-h2024-lab-1 | ACTIVE  | master-snap-01                    |
  | in9999-h2024-lab-2 | ACTIVE  | master-snap-01                    |
  | in9999-h2024-lab-3 | ACTIVE  | master-snap-01                    |
  | in9999-h2024-lab-4 | ACTIVE  | master-snap-01                    |
  | in9999-master      | SHUTOFF | GOLD Windows Server 2022 Standard |
  +--------------------+---------+-----------------------------------+



Configure student instances
---------------------------

Download the following files into the same directory as the Terraform
files:

* :download:`terraform.yaml <downloads/usecase01/terraform.yaml>`
* :download:`add-labuser.yaml <downloads/usecase01/add-labuser.yaml>`

Edit these files as necessary. At minimum you need to edit the
``terraform.yaml`` file.

Test that ansible works:

.. code-block:: console

  $ ansible -i terraform.yaml all -m win_ping
  [WARNING]: Collection cloud.terraform does not support Ansible version 2.14.14
  [WARNING]: Invalid characters were found in group names but not replaced, use -vvvv to see details
  in9999-h2024-lab-1 | SUCCESS => {
      "changed": false,
      "ping": "pong"
  }
  in9999-h2024-lab-0 | SUCCESS => {
      "changed": false,
      "ping": "pong"
  }
  in9999-h2024-lab-2 | SUCCESS => {
      "changed": false,
      "ping": "pong"
  }
  in9999-h2024-lab-4 | SUCCESS => {
      "changed": false,
      "ping": "pong"
  }
  in9999-h2024-lab-3 | SUCCESS => {
      "changed": false,
      "ping": "pong"
  }

Run the ``add-labuser.yaml`` playbook:

.. code-block:: console

  $ ansible-playbook -i terraform.yaml add-labuser.yaml
  (...output omitted...)

The credentials are saved in a file called ``labusers.csv``, which is
located in the same directory as the playbook. Example contents:

.. code-block::

  HOST,IPADDR,USERNAME,PASSWORD
  in9999-h2024-lab-0,2001:700:2:8201::100e,labuser,Msho!nLKCCo)yIAvB$UC
  in9999-h2024-lab-1,2001:700:2:8201::1270,labuser,cXhm_q%xvwvBmLM6rPF6
  in9999-h2024-lab-2,2001:700:2:8201::1485,labuser,sGecTMBp0u11x0.OpEGn


Adding or removing instances
----------------------------

In order to to increase or decrease the number of instances, change
the number in ``variables.tf``:

.. literalinclude:: downloads/usecase01/variables.tf
   :language: terraform
   :caption: variables.tf
   :linenos:
   :lines: 64-70
   :emphasize-lines: 5

Then run::

  terraform plan
  terraform apply

Create users as before with::
  
  ansible-playbook -i terraform.yaml add-labuser.yaml

The credentials file ``labusers.csv`` will be updated to reflect the
changes. Note that the passwords are randomly generated but
idempotent, thus changing the number of instances will not change
passwords for existing instances.

-------------------------------------------------------------------------

File listing
------------

A complete listing of the example files used in this document is
provided below.

.. literalinclude:: downloads/usecase01/terraform.yaml
   :language: yaml
   :caption: terraform.yaml
   :name: usecase01-ansible-inventory
   :linenos:

.. literalinclude:: downloads/usecase01/main.tf
   :language: terraform
   :caption: main.tf
   :name: usecase01-main-tf
   :linenos:

.. literalinclude:: downloads/usecase01/secgroup.tf
   :language: terraform
   :caption: secgroup.tf
   :name: usecase01-secgroup-tf
   :linenos:

.. literalinclude:: downloads/usecase01/variables.tf
   :language: terraform
   :caption: variables.tf
   :name: usecase01-variables-tf
   :linenos:

.. literalinclude:: downloads/usecase01/terraform.tfvars
   :caption: terraform.tfvars
   :name: usecase01-terraform-tfvars
   :linenos:

.. literalinclude:: downloads/usecase01/add-labuser.yaml
   :language: yaml
   :caption: add-labuser.yaml
   :name: usecase01-add-labuser.yaml
   :linenos:
